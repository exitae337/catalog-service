spring.application.name=${SPRING_APPLICATION_NAME}

eureka.client.enabled=true
eureka.client.service-url.defaultZone=${EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE}
eureka.client.fetch-registry=true
eureka.client.register-with-eureka=true
eureka.instance.hostname=${EUREKA_INSTANCE_HOSTNAME}
eureka.instance.non-secure-port=${EUREKA_INSTANCE_NON_SECURE_PORT}

service.category-service.name=${SERVICE_CATEGORY_SERVICE_NAME}

logging.level.root=trace

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.datasource.driver-class-name=org.postgresql.Driver

spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}

spring.cache.redis.time-to-live=${SPRING_CACHE_REDIS_TIME_TO_LIVE:1d}
spring.cache.type=redis
spring.data.redis.host=${SPRING_DATA_REDIS_HOST}
spring.data.redis.port=${SPRING_DATA_REDIS_PORT}
spring.data.redis.password=${SPRING_DATA_REDIS_PASSWORD}

spring.kafka.producer.acks=all

spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer

spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer

spring.liquibase.change-log=db/changelog/changelog-master.yaml

minio.endpoint=${MINIO_ENDPOINT}
minio.username=${MINIO_USERNAME}
minio.password=${MINIO_PASSWORD}
minio.bucket=${MINIO_BUCKET}

service.gateway.name=${SERVICE_GATEWAY_NAME}

product.max-images=${PRODUCT_MAX_IMAGES:10}

topic.new-product=new-products

spring.quartz.job-store-type=jdbc
spring.quartz.jdbc.initialize-schema=never
spring.quartz.properties.org.quartz.jobStore.driverDelegateClass=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
spring.quartz.properties.org.quartz.jobStore.dataSource=dataSource
spring.quartz.overwrite-existing-jobs=true

quartz.cron.new-product-event.created=0 * * * * ?
quartz.cron.new-product-event.failed=0 0/2 * * * ?
quart.cron.delete-sent-event=0 0 0 1 * ?

management.endpoints.web.exposure.include=health,info,prometheus
management.endpoint.health.show-details=always
